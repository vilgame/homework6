Задача: протестировать API эмулятора онлайн магазина домашних животных.
Документация API: https://petstore.swagger.io/#/store
Предмет тестирования: методы раздела STORE в документации.



Порядок работы:

Создать новый проект на gitlab.com или github.com
Скопировать в созданный проект файлы и папки из репозитория https://gitlab.com/lanit-at-school/petstore-api-test.git
в котором содержит пример тестирования данного онлайн магазина. В примере в пакете org.example.api.pet проверяются методы раздела PET (см. документацию API).
Ничего не меняя в скопированных файлах, выполнить коммит в ветку master. Выполнить push на удаленный репозиторий.
Из текущего состояния создать ветку develop.
В классе org.example.api.store.StoreApiTest написать два тестовых метода:
- оформить заказ на питомца и проверить, что заказ можно найти;
- удалить оформленный ранее заказ и проверить, что заказ не может быть найден.
Выполнить коммит в develop и отправить ветку на удаленный репозиторий.
Сделать merge request (pull request) ветки develop в ветку master. Убедиться, что изменения (diff) соответствуют проделанной работе.
Задания со звёздочкой:
* Для эндпоинта /store/inventory попробовать сохранить тело ответа виде Map.class и с помощью Assert провалидировать какое-либо её значение. Например:

Assert.assertTrue(inventory.containsKey("sold"), "Inventory не содержит статус sold" );


** Также можно проверить и другие эндпоинты из PetStore, но это уже просто чтобы лучше разобраться)
Для создания POJO объекта ORDER можно использовать плагин RoboPOJOGenerator, его показывали в конце 6 урока. Класс Order поместить в пакет org.example.model вместе с остальными POJO объектами. (Скриншоты ниже)

Требования:

Тестовые методы должны отправлять HTTP запросы с помощью библиотеки RestAssured
Изменения в merge request (pull request) не должны содержать файлов компиляции и автоматически сгенерированных файлов среды разработки (pom.xml и .gitignore не в счёт, они нужны)
Изменения в merge request (pull request) не должны содержать приватные данные, например токены или ключи в properties файлах.
Примечание:

В классе PetApiTestWithoutPrepare пример того, как можно отправлять запросы без RestAssured.requestSpecification = new RequestSpecBuilder(), это чтобы вы понимали, как ещё их можно отправлять). Также там есть фильтр, позволяющий выводить в консоль результаты Response (ответа).